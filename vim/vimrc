call plug#begin('~/.vim/plugged')

" Basics
Plug 'tpope/vim-sensible'

" Looks
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Editing
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'

" Navigation
Plug 'tpope/vim-unimpaired'

" Find & Grep
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Git
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" LSP
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

call plug#end()

" Basics:
" Set line numbers
set number
set relativenumber

" Indentation
set expandtab
set shiftwidth=4
set tabstop=4
set smartindent

" Search settings
set ignorecase
set smartcase
set hlsearch

" Do not draw macros
set lazyredraw

" Do not save backups
set nobackup
set noswapfile
set writebackup

" Do not wrap long lines
set nowrap

" No bells
set belloff=all

" Remember last position
function s:lastpos()
  if line("'\"") > 1 && line("'\"") <= line("$")
    exe "normal! g'\""
  endif
endfunction

autocmd BufReadPost * call s:lastpos()

" CoC:
" TestEdit might fail if hidden is not set.
set hidden

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000ms = 4s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show to signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Gruvbox:
" Set dark mode
set background=dark

" Show comments in italics, and set high contrast
let g:gruvbox_italic  = 1
let g:gruvbox_contrast_dark = 'hard'

colorscheme gruvbox

" Cursor
if &term =~ '^xterm'
  let &t_EI .= "\<Esc>[2 q" " Normal mode - solid block
  let &t_SI .= "\<Esc>[6 q" " Insert mode - solid vertical bar
endif

" Airline:
" Always show tab line
let g:airline#extensions#tabline#enabled = 1

" Disable separators because we don't have pretty fonts for them (yet)
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" Markdown:
" Syntax highlighting for code segments
let g:markdown_fenced_languages = ['cpp', 'python', 'bash', 'sh', 'vim']

" Grep:
" Highlight matches
let g:rg_highlight = 'true'

" Use correct browser on WSL
if wsl#is_wsl()
  let g:netrw_browsex_viewer = "cmd.exe /C start"
endif

" Mappings:
let mapleader = ' '

" Git
nmap <leader>gs :Git<CR>
nmap <leader>gb :Git blame<CR>

" Find & Grep
nmap <leader>g :Rg<space>
nmap <leader>p :Files<CR>
nmap <leader>b :Buffers<CR>
nmap <leader>h :History<CR>
